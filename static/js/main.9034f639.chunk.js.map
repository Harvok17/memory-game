{"version":3,"sources":["shuffleArray.js","components/Board.js","components/Link.js","components/usePath.js","components/Header.js","components/Route.js","components/Modal.js","components/Instruction.js","components/App.js","index.js"],"names":["shuffleArray","array","temporaryValue","randomIndex","arr","currentIndex","length","Math","floor","random","Board","characters","handleClick","currentScore","useState","animate","setAnimate","useEffect","timerId","setTimeout","clearTimeout","renderedList","map","character","className","onClick","src","image","alt","name","id","Link","href","children","e","metaKey","ctrlKey","preventDefault","window","history","pushState","navEvent","PopStateEvent","dispatchEvent","location","currentPath","setCurrentPath","onLocationChange","pathname","addEventListener","removeEventListener","Header","bestScore","usePath","label","path","index","selected","Route","Modal","gameOver","resetGame","Instruction","App","setCharacterData","maxScore","setMaxScore","setBestScore","setCurrentScore","setGameOver","a","axios","get","data","initData","console","error","message","fetchData","forEach","isClicked","char","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.9034f639.chunk.js","sourcesContent":["export const shuffleArray = (array) => {\n    const arr = [...array];\n    let currentIndex = arr.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      // And swap it with the current element.\n      temporaryValue = arr[currentIndex];\n      arr[currentIndex] = arr[randomIndex];\n      arr[randomIndex] = temporaryValue;\n    }\n    return arr;\n  };","import React, { useEffect, useState } from 'react';\n\nconst Board = ({ characters, handleClick, currentScore }) => {\n  const [animate, setAnimate] = useState(false);\n\n  useEffect(() => {\n    setAnimate(true);\n    const timerId = setTimeout(() => setAnimate(false), 550);\n\n    return () => clearTimeout(timerId);\n  }, [currentScore]);\n\n  const renderedList = characters.map(character => {\n    return (\n      <div\n        key={character.id}\n        className={`tile ${animate ? 'flip' : ''}`}\n        onClick={() => handleClick(character)}\n      >\n        <div className=\"card\">\n          <div className=\"card__img\">\n            <img src={character.image} alt={character.name} />\n          </div>\n          <div className=\"card__name\">{character.name}</div>\n        </div>\n      </div>\n    );\n  });\n\n  return <div className=\"container\">{renderedList}</div>;\n};\n\nexport default Board;\n","import React from \"react\";\n\nconst Link = ({ href, children }) => {\n  const onClick = (e) => {\n    if (e.metaKey || e.ctrlKey) {\n      return;\n    }\n\n    e.preventDefault();\n    window.history.pushState({}, \"\", href);\n\n    const navEvent = new PopStateEvent(\"popstate\");\n    window.dispatchEvent(navEvent);\n  };\n\n  return (\n    <a onClick={onClick} href={href}>\n      {children}\n    </a>\n  );\n};\n\nexport default Link;\n","import { useState, useEffect } from 'react';\n\nexport default location => {\n  const [currentPath, setCurrentPath] = useState(location);\n\n  useEffect(() => {\n    const onLocationChange = () => {\n      setCurrentPath(window.location.pathname);\n    };\n\n    window.addEventListener('popstate', onLocationChange);\n\n    return () => {\n      window.removeEventListener('popstate', onLocationChange);\n    };\n  }, []);\n\n  return currentPath;\n};\n","import React from 'react';\nimport Link from './Link';\nimport usePath from './usePath';\n\nconst Header = ({ bestScore }) => {\n  const currentPath = usePath(window.location.pathname);\n  const menu = [\n    { label: 'Memory Game', path: '/memory-game' },\n    { label: 'How To Play', path: '/instruction' },\n  ];\n\n  return (\n    <header className=\"header\">\n      <div className=\"header__menu\">\n        <ul className=\"header__items\">\n          {menu.map(({ label, path }, index) => {\n            const selected =\n              path === currentPath ? 'header__item--selected' : '';\n            return (\n              <li key={index} className={`header__item ${selected}`}>\n                <Link href={path}>{label}</Link>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n      <div className=\"header__score\">Best Score: {bestScore}</div>\n    </header>\n  );\n};\n\nexport default Header;\n","import usePath from './usePath';\n\nconst Route = ({ path, children }) => {\n  const currentPath = usePath(window.location.pathname);\n\n  return currentPath === path ? children : null;\n};\n\nexport default Route;\n","import React from 'react';\n\nconst Modal = ({ gameOver, resetGame }) => {\n  return gameOver ? (\n    <div className=\"modal-overlay\">\n      <div className=\"modal\">\n        <p>Congratulations! You're a Genius!</p>\n        <button onClick={resetGame}>Play Again</button>\n      </div>\n    </div>\n  ) : null;\n};\n\nexport default Modal;\n","import React from 'react';\n\nconst Instruction = () => {\n  return (\n    <div className=\"instruction\">\n      <h1>Memory Game</h1>\n      <p>\n        This application puts your memory to the test. You are presented with\n        multiple images of Rick and Morty characters. The images get shuffled\n        every-time they are clicked. You <strong>CAN NOT</strong> click on any\n        image more than once or else your score resets to zero. The main\n        objective is to get the highest score as possible or beat the game.\n      </p>\n    </div>\n  );\n};\n\nexport default Instruction;\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { shuffleArray } from '../shuffleArray';\nimport Board from './Board';\nimport Header from './Header';\nimport Route from './Route';\nimport Modal from './Modal';\nimport Instruction from './Instruction';\n\nconst App = () => {\n  const [characters, setCharacterData] = useState([]);\n  const [maxScore, setMaxScore] = useState(null);\n  const [bestScore, setBestScore] = useState(0);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const { data } = await axios.get(\n          'https://rickandmortyapi.com/api/character/1,2,3,4,5,7,343,118,47,180,115,103,242,331,558,208,564,375,107,171'\n        );\n\n        initData(data);\n        setCharacterData(shuffleArray(data));\n        setMaxScore(data.length);\n      } catch (err) {\n        console.error(err.message);\n      }\n    };\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    setCharacterData(shuffleArray(characters));\n    if (currentScore > bestScore) setBestScore(currentScore);\n    if (currentScore === maxScore) setGameOver(true);\n  }, [currentScore]);\n\n  const handleClick = char => {\n    if (!char.isClicked) {\n      setCharacterData(\n        characters.map(character =>\n          character.id === char.id\n            ? { ...character, isClicked: true }\n            : character\n        )\n      );\n      setCurrentScore(currentScore + 1);\n    }\n\n    if (char.isClicked) {\n      resetGame();\n    }\n  };\n\n  const initData = data => {\n    data.forEach(character => (character.isClicked = false));\n  };\n\n  const resetGame = () => {\n    initData(characters);\n    setCurrentScore(0);\n    setGameOver(false);\n  };\n\n  return (\n    <>\n      <Header bestScore={bestScore} />\n      <p className=\"current-score\">Current Score: {currentScore}</p>\n      <Route path=\"/memory-game\">\n        <Board\n          characters={characters}\n          handleClick={handleClick}\n          currentScore={currentScore}\n        />\n      </Route>\n      <Route path=\"/instruction\">\n        <Instruction />\n      </Route>\n      <Modal gameOver={gameOver} resetGame={resetGame} />\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './styles/index.css';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}